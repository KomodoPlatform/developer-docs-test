# Complete items in CMakeLists.txt
# Create .js files that are imported at the top of a .md file, and which can then be inserted later in the document
# -- this is how I expect we are going to process files from SDK documentation
# -- for example, doxybook2 would take the xml comments, my parser would take the content and split it into the proper formats in a .js file
# -- in the .md file, we call the .js file, we have all the introductory content and anything else that's not taken from the source code, and then call the .js file
# Organize all the Komodo dev-team repositories into the submodules, and organize a Doxyfile and Doxybook flow for each one
# Create a master CMake file that allows anyone to simply run CMake and update the live documentation
# Potentially create a repository/website that holds a temporary version, so that developers can test things out, if needed
# -- This would require that there be some setting somewhere in the documentation -- possibly in the source code itself -- that sets something to private and is not rendered to the live site

# make Doxygen 
# cmake -DANTARA_BUILD_DOCS=ON ../
# .github/workflows/docs.yml

# Build process for Antara Gaming SDK
# Some script to alter the Doxyfile, or download a different Doxyfile
# This doxyfile builds the documentation to xml, disables html and latex, and may need to change the output directory
# mkdir build
# cd build
# cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER="$(which clang)" -DANTARA_BUILD_DOCS=ON ../
# cmake --build . --config Debug
# make doxygen
# the output is in build/docs/doxygen/xml

# Build process for doxybook2 (necessary for nodes that want to compile/update code and do not yet have Doxybook2 installed)
# Download the project and all of the submodules
# git clone https://github.com/matusnovak/doxybook2.git
# cd doxybook2
# git submodule update --init
# 
# # Configure the project
# mkdir build
# cd build
# cmake -G "Unix Makefiles" \
#     -DDOXYBOOK_TESTS=OFF \
#     -DDOXYBOOK_STATIC_STDLIB=OFF \
#     -DBUILD_TESTS=OFF \
#     -DBUILD_TESTING=OFF \
#     -DBUILD_SHARED_LIBS=OFF \
#     -DCMAKE_BUILD_TYPE=MinSizeRel \
#     ..
# # Build it
# cmake --build .
# 
# # Done!

# How to get the git repo to ignore submodules
# git config submodule.<your module path>.ignore all

# If you already cloned the project and forgot --recurse-submodules, you can combine the git submodule init and git submodule update steps by running git submodule update --init. To also initialize, fetch and checkout any nested submodules, you can use the foolproof git submodule update --init --recursive.

# To ignore submodules in git repo
# git config submodule.<your module path>.ignore all
